library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity SPI_Slave is
    Port(
        clk : in STD_LOGIC;
        SS : in STD_LOGIC;          -- Active low slave select
        MOSI : in STD_LOGIC;        -- Master output, slave input
        MISO : out STD_LOGIC;       -- Master input, slave output
        Tiva_SCLK : in STD_LOGIC    -- Clock from the master

    );
end SPI_Slave;

architecture Behavioral of SPI_Slave is
    signal data : std_logic;
    signal addr : std_logic_vector (7 downto 0);
    signal cnt : unsigned(2 downto 0) := (others => '0');
    signal prev_SS : std_logic := '1';
    signal prev_Tiva_SCLK : std_logic := '0';
    signal edge_detected : std_logic := '0';

begin
    process(clk)
    begin
        if rising_edge(clk) then
            if SS /= prev_SS then
                if SS = '0' then
                    addr <= (others => '0');
                end if;
                prev_SS <= SS;
            end if;
            
            if prev_SS = '0' then
                if Tiva_SCLK = '1' and prev_Tiva_SCLK = '0' then
                    edge_detected <= '1';
                else
                    edge_detected <= '0';
                end if;
                
                if edge_detected = '1' then
                    data <= MOSI;
                    addr <= addr(6 downto 0) & data;
                end if;
                
                MISO <= addr(to_integer(cnt));
                
                if cnt = 7 then
                    cnt <= (others => '0');
                else
                    cnt <= cnt + 1;
                end if;
            else
                MISO <= '1';
            end if;
            
            prev_Tiva_SCLK <= Tiva_SCLK;
        end if;
    end process;
end Behavioral;
